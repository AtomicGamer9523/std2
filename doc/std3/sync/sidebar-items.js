window.SIDEBAR_ITEMS = {"mod":[["atomic","Atomic types"]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["Barrier","A primitive that synchronizes the execution of multiple threads."],["BarrierWaitResult","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["Mutex","A spin-based lock providing mutually exclusive access to data."],["MutexGuard","A generic guard that will protect some data access and uses either a ticket lock or a normal spin mutex."],["RwLock","A lock that provides data access to either one writer or many readers."],["RwLockReadGuard","A guard that provides immutable data access."],["RwLockWriteGuard","A guard that provides mutable data access."],["Weak","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an [Option]<[Arc]<T>>."]],"type":[["Lazy","A value which is initialized on the first access. See [`lazy::Lazy`] for documentation."],["Once","A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation."]]};